- name: add helm chart repositories
  kubernetes.core.helm_repository:
    name: "{{ item.name }}"
    repo_url: "{{ item.url }}"
  with_items:
    - { name: 'grafana', url: 'https://grafana.github.io/helm-charts' }
    - { name: 'nginx', url: 'https://kubernetes.github.io/ingress-nginx' }
    - { name: 'prometheus', url: 'https://prometheus-community.github.io/helm-charts'}
    - { name: 'longhorn', url: 'https://charts.longhorn.io'}
  tags:
    - nginx
    - helm
    - helm-repos

- name: deploy Nginx Ingress Controller
  kubernetes.core.helm:
    name: nginx-ingress
    chart_ref: nginx/ingress-nginx
    release_namespace: default
    create_namespace: true
    release_state: present
    values:
      controller:
        service:
            nodePorts:
                http: "30111"
                https: "30222"
  tags:
    - nginx
    - helm
  environment:
    KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
# helm install --namespace <NAMESPACE> gitlab-runner -f <CONFIG_VALUES_FILE> gitlab/gitlab-runner

- name: deploy Grafana
  kubernetes.core.helm:
    name: grafana
    chart_ref: grafana/grafana
    release_namespace: default
    create_namespace: true
    release_state: present
    values:
      ingress:
        enabled: true
        path: /grafana/?(.*)
        hosts:
          - raspberrypi
        annotations:
          #nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          nginx.ingress.kubernetes.io/rewrite-target: /$1
          nginx.ingress.kubernetes.io/use-regex: "true"
          kubernetes.io/ingress.class: nginx

      grafana.ini:
        server:
          root_url: "%(protocol)s://%(domain)s/grafana"
          serve_from_sub_path: true
      datasources:
        datasources.yaml:
          apiVersion: 1
          datasources:
          - name: PrometheusRaspberryPiHomeLab
            type: prometheus
            url: http://prometheus-server/prometheus
      dashboards:
         default:
           monitoring:
             gnetId:  15120
             revision: 11
             datasource: PrometheusRaspberryPiHomeLab 
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
          - name: 'default'
            orgId: 1
            folder: 'default'
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards
      persistence:
        type: pvc
        enabled: true
        storageClassName: longhorn
        accessModes:
          - ReadWriteOnce
        size: 1Gi

  tags:
    - nginx
    - helm
    - grafana
  environment:
    KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"

- name: copy patch files
  copy:
    src: '{{ item }}'
    dest: '/opt/{{ item }}'
  with_items:
    - grafana-ing.patch
    - prometheus-ing.patch
    - longhorn-ing.patch
  tags:
    - nginx
    - helm
    - longhorn-patch
    - longhorn-deployment

- name: patch grafana ingress
  command: kubectl patch ingress grafana --patch-file /opt/grafana-ing.patch
  tags:
    - nginx
    - helm
    - grafana-patch
    - grafana
  environment:
    KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
# kubectl patch ingress grafana --patch-file grafana-ing.patch
# kubectl patch ingress prometheus-server --patch-file prometheus-ing.patch

- name: deploy Prometheus
  kubernetes.core.helm:
    name: prometheus
    chart_ref: prometheus/prometheus
    release_namespace: default
    create_namespace: true
    release_state: present
    values:
      alertmanager:
        enabled: false
      kube-state-metrics:
        enabled: false
      prometheus-pushgateway:
        enabled: false
      prometheus-node-exporter:
        enabled: false
      server:
        ingress:
          enabled: true
          path: /prometheus
          hosts:
            - raspberrypi
          annotations:
            #nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
            #nginx.ingress.kubernetes.io/rewrite-target: /$1
            nginx.ingress.kubernetes.io/use-regex: "true"
            kubernetes.io/ingress.class: nginx

        ## Prometheus server container name
        prefixURL: /prometheus
        extraFlags:
          - web.enable-lifecycle
          - web.external-url=/prometheus
        persistentVolume:
          enabled: true
          storageClass: longhorn
          size: 2Gi
  tags:
    - nginx
    - helm
    - prometheus
  environment:
    KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"

- name: patch prometheus ingress
  command: kubectl patch ingress prometheus-server --patch-file /opt/prometheus-ing.patch
  tags:
    - nginx
    - helm
    - prometheus-patch
  environment:
    KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
# kubectl patch ingress grafana --patch-file grafana-ing.patch
# kubectl patch ingress prometheus-server --patch-file prometheus-ing.patch

- name: deploy longhorn
  kubernetes.core.helm:
    name: longhorn
    chart_ref: longhorn/longhorn
    release_namespace: longhorn-system
    create_namespace: true
    release_state: present
    values:
      csi:
        attacherReplicaCount: 1
        provisionerReplicaCount: 1
        resizerReplicaCount: 1
        snapshotterReplicaCount: 1
      defaultSettings:
        concurrentReplicaRebuildPerNodeLimit: 2
        defaultReplicaCount: 1
        guaranteedEngineManagerCPU: 4
        guaranteedReplicaManagerCPU: 4
      image:
        defaultImage: true
      longhorn:
        default_setting: true
      persistence:
        defaultClass: true
        defaultFsType: ext4
        defaultClassReplicaCount: 2
        defaultDataLocality: disabled # best-effort otherwise
        reclaimPolicy: Retain
      ingress:
      ## Set to true to enable ingress record generation
        enabled: true
        host: raspberrypi
        path: /longhorn(/|$)(.*)
        annotations:
            # nginx.ingress.kubernetes.io/use-regex: "true"
            kubernetes.io/ingress.class: nginx
            nginx.ingress.kubernetes.io/rewrite-target: /$2
  tags:
    - longhorn
    - longhorn-deployment
    - helm
  environment:
    KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"

- name: patch longhorn ingress
  command: kubectl patch ingress longhorn-ingress --patch-file /opt/longhorn-ing.patch -n longhorn-system
  tags:
    - helm
    - longhorn-patch
    - longhorn-deployment
  environment:
    KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
